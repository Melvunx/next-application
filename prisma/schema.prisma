// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  offers        Offer[]
  notifications Notification[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Offer {
  id            String         @id @default(cuid())
  title         String?
  type          TypeOffer      @default(BYOFFER)
  company       String
  url           String
  applyDate     DateTime
  location      String
  status        Status         @default(PENDING)
  isArchived    Boolean        @default(false)
  isFavorite    Boolean        @default(false)
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  User          User           @relation(fields: [userId], references: [id])
  userId        String
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  offerId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer     Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
}

enum TypeOffer {
  SPONTANEOUS
  BYOFFER
}

enum Status {
  PENDING
  INTERVIEW
  REJECTED
  ACCEPTED
}
